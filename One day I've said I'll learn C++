//-------------------------------First Lesson------------------------------
#include <iostream>
int main() {

    //This works better than I excepted ngl
    /*
    N
    I
    G
    G
    A
    */
    std::cout <<"I hate niggers" << std::endl; 
    std::cout << "Also gypsies" << '\n';
    std::cout <<"I love horses though";
    return 0;
}
//-------------------------------------------------------------

//--------------------------Variables-----------------------------------
#include <iostream>
int main() {
   //----integer (whole number)----
   int age = 6; //declaration of variable x
   int year = 2017; //declaration of variable y 
   int sum = age + year; //sum of x and y

   std::cout << age << std::endl; //print x
   std::cout << year << std::endl; //print y
   /*
   int z = 3.6;
   std::cout << z << '\n'; //prints 3 because z is an integer. We should use float or double.
   */
   

   //----double (decimal number)----
   double price = 3.99; //declaration of variable a
   double temperature = 27.4; //declaration of variable b
   std::cout << price << std::endl; //print 3.99
   std::cout << temperature << std::endl; //print 27.4

   //----char (single character)----
    char grade = 'A'; //declaration of variable grade
    char initial = 'B'; //declaration of variable initial
    
    std::cout << grade << std::endl; //print A
    std::cout << initial << std::endl; //print B
    /*
    char overflow = "AB"; error:
    std::cout << overflow << std::endl; //error
    error: overflow, because char can only store A SINGLE character.
    */

    //----boolean (true or false)----
    bool isStudent = true; //declaration of variable isStudent
    bool isGraduated = false; //declaration of variable isGraduated
    bool power = (5 > 3); //declaration of variable power, which is true because 5 is greater than 3
    bool test = !power; //declaration of variable test, which is false because power is true and !true is false

    //----std::string (text)----
    std::string name = "Michael"; //declaration of variable name
    std::string day = "Monday"; //declaration of variable day
    std::string food = "Burger"; //declaration of variable food

    std::cout << name << std::endl; //print Michael
    std::cout << "Hello "<< name << std::endl; //print hello Michael
    std::cout << "Today is " + day << std::endl; //print Today is Monday
    std::cout << "I like " + food << std::endl; //print I like Burger

    //----examples----
    std::cout << "I am " << age << " years old." << std::endl; //print I am 6 years old.
    std::cout << "I was born in " << year << "." << std::endl; //print I was born in 2017.
   return 0;
}
//-------------------------------------------------------------

//----------------------------Const---------------------------------

#include <iostream>
int main(){
    const double PI = 3.14159;
    const int LIGHT_SPEED = 299792458; // in m/s
    const int WIDTH = 1920; //in pixels
    const int HEIGHT = 1080; //in pixels
    //You can't change the value of a constant.
    /*PI=420;
    This line will cause a compilation error because PI is a constant.
    */
    
    double radius = 10;
    double circumference = 2 * PI * radius;

    std::cout << circumference << "cm(s)" << std::endl;

    return 0;
}
//-------------------------------------------------------------

//--------------------------Namespaces-----------------------------------
#include <iostream>
namespace First {
    int x = 5;
}
namespace Second {
    int x = 10;
}

int main() {
/*
int x = 0; //We can't add another variable as x. So I need to use namespaces.
std::cout << x; // Outputs: 0
std::cout << First::x; // Outputs: 5
std::cout << Second::x; // Outputs: 10
*/

/*
using namespace std;
std::cout << First::x; // Outputs: 5
*/

/*
using namespace std;
cout << First::x; // Outputs: 5
*/

/*
using std::cout;
cout << First::x; // Outputs: 5
*/

/*
using std::string;
string Name = "Michael";
std::cout << Name; // Outputs: Michael
*/

/*
using namespace First;
std::cout << x; // Outputs: 5
*/

/*
using namespace Second;
std::cout << x; // Outputs: 10
*/

/*
using namespace First;
std::cout << sSecond::x; // Outputs: 10
*/

return 0;
}
//-------------------------------------------------------------

//--------------------Typedef and Type Aliases-----------------------------------------
#include <iostream>
#include <vector>

/*
typedef std::vector<std::pair<std::string, int>> pairlist_t;
typedef std::string txt_t;
typedef int number_t;
*/
using txt_t = std::string;
using number_t = int;
using pairlist_t = std::vector<std::pair<std::string, int>>;


int main() {
    /*
    std::vector<std::pair<std::string, int>> pairlist; //pairlist_t pairlist;
    txt_t txt = "Hello, World!"; //std::string txt = "Hello, World!";
    number_t number = 42; //int number = 42;*/

    txt_t txt = "Hello, World!";
    number_t number = 42;
    pairlist_t pairlist;

    return 0;
}
//-------------------------------------------------------------
